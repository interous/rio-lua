'prelude.rio import

"  " set-backend-indent

'check-rational {
  !lit 0 #idx !i
  #false !found-dot
  { lit i at '- quote->char = } { i inc :i } if

  { } { i lit len < } { i inc :i }
  { lit i at !cur
    { cur '. quote->char = found-dot and }
    { "Failed to parse " lit " as rational (found two dots)" ++ ++
      compile-error
    }
    { cur '. quote->char = } { #true :found-dot }
    { cur '0 quote->char < cur '9 quote->char > or }
    { "Failed to parse " lit " as rational: " cur char->quote " not a digit"
      ++ ++ ++ ++ compile-error
    } if
  } for
} macro

'check-integral {
  !lit 0 #idx !i
  { lit i at '- quote->char = } { i inc :i } if

  { } { i lit len < } { i inc :i }
  { lit i at !cur
    { cur '0 quote->char < cur '9 quote->char > or }
    { "Failed to parse " lit " as integral: " cur char->quote " not a digit"
      ++ ++ ++ ++ compile-error
    } if
  } for
} macro

'make-numeric-type {
  !repr '#B require-type !size !kind !type
  type add-type
  type {}
    'dup symbol block-push
    'check- kind ++ symbol block-push
    'quote-> type ++ symbol block-push
  macro
  type '->quote ++ {
    '__quote unsafe-set-type
  } macro
  '_ type '_to-quote ++ ++ {
    '__quote unsafe-set-type
  } macro
  'quote-> type ++ {}
    type block-push
    'unsafe-set-type symbol block-push
  macro
  type '->repr ___quote___quote_++ {}
    repr block-push
  macro
  '_ type '_repr-of ___quote___quote_++ ___quote___quote_++ { drop }
    repr block-push
  macro
  type '->size ++ {}
    size block-push
  macro
  '_ type '_size-of ++ ++ { drop }
    size block-push
  macro

  '_ type '_ type '_ ++ ++ ++ ++ !preface

  '_ type '_declare ++ ++ {}
    repr " " ++ block-push
    'swap symbol block-push
    ";" block-push
    '++ symbol block-push
    '++ symbol block-push
    'backend-declare symbol block-push
  macro
  '_ type '_commit ++ ++ {
    !val !name
    name " = " val to-quote '; ++ ++ ++ backend-code
  } macro

  preface '+ ++ {
    !b !a
    '( a to-quote " + " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro

  preface '< ++ {
    !b !a
    '( a to-quote " < " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro

  preface '= ++ {
    !b !a
    '( a to-quote " == " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro

  preface '/= ++ {
    !b !a
    '( a to-quote " != " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro
} macro

'make-decision-type {
  !type
  type add-type
  type ^decision-type
  type {
    !val
    { val '0 /= val '1 /= and }
    { "Invalid literal to decision constructor; must be 0 or 1" compile-error }
    if
    val
  } 'quote-> type ++ symbol block-push
  macro
  type '->quote ++ {
    '__quote unsafe-set-type
  } macro
  '_ type '_to-quote ++ ++ {
    '__quote unsafe-set-type
  } macro
  'quote-> type ++ {}
    type block-push
    'unsafe-set-type symbol block-push
  macro

  [ Assume we're using int as the underlying decision type ]
  type '->size ++ { 4 #B } macro
  '_ type '_size-of ++ ++ { drop 4 #B } macro

  '_ type '_ type '_ ++ ++ ++ ++ !preface

  '_ type '_declare ++ ++ {
    "int " swap '; ++ ++ backend-declare
  } macro
  '_ type '_commit ++ ++ {
    !val !name
    name " = " val to-quote '; ++ ++ ++ backend-code
  } macro

  preface 'and ++ {
    !b !a
    '( a to-quote " && " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro

  preface 'or ++ {
    !b !a
    '( a to-quote " || " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro

  preface 'not ++ {
    '!( swap to-quote ') ++ ++
  } 'quote-> type ++ symbol block-push
  macro

  preface '= ++ {
    !b !a
    '( a to-quote " == " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro

  preface '/= ++ {
    !b !a
    '( a to-quote " != " b to-quote ') ++ ++ ++ ++
    b merge-aliases a merge-aliases
  } 'quote-> type ++ symbol block-push
  macro
} macro

'int4 'integral 4 #B 'int make-numeric-type
'ratio4 'rational 4 #B 'float make-numeric-type
'bool make-decision-type

'list-type {
  !inner !outer
  outer add-type
  inner '->repr ++ eval !inner-repr
  inner '->size ++ eval !inner-size

  2 pointer-size * inner-size / !header-size

  outer {}
    outer block-push
  { mangle-name !name }
    inner-repr block-push
  { "* " name '; ++ ++ ++ backend-declare
  } ++ ++ inline
  [ Need to finish this up, but............. named arguments? ]

  outer '->repr ++ {}
    inner-repr block-push
    '* block-push
    '++ symbol block-push
  macro
} macro

'backend-finalize {
  !body !decls
  "int main(int __argv, char** __argc) {\n" decls body "  return 1;\n}\n" ++ ++ ++
} macro

'backend-if {
  !false !true !condition
  "if(" condition to-quote ") {" ++ ++ backend-code
  true backend-raw-code
  "} else {" backend-code
  false backend-raw-code
  "}" backend-code
} macro

'backend-while {
  !body !condition !head
  "while(1) {" backend-code
  head backend-raw-code
  "if(!(" condition to-quote ")) break;" ++ ++ backend-code
  body backend-raw-code
  "}" backend-code
} macro
