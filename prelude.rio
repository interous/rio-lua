'swap { 1 #idx lift } macro

[ The empty type is uninhabited; it could also be called the unit type (as in,
  e.g., Haskell and F#) but that name refers to units of measure in Rio. The
  primary purpose of the empty type is for discriminated unions to have an
  uninhabited clause, i.e., for things like Haskell's Maybe type or, more
  broadly, for "formally" nullable union types.

  Note that nothing can really be done with the empty type, so macros that
  enumerate types ought to be prepared for that possibility. In particular, this
  means that union "kinds" should generally only be created by people who know
  what they're doing.
]
'empty add-type
'empty { ' 'empty unsafe-set-type } macro

'reserve-name {
  !name
  name {
    "the name " ^name " should not be used" ++ ++ compile-error
  } inject macro
} macro

'fi { '__fi } macro

[ Conceptually, for can be thought of as,
    !body !change !check !preamble
    preamble flatten
    check
    body change ++
    while
  Since it's inline, it's better to handle all this anonymously.
]
'for {
  3 #idx lift flatten
  swap ++
  while
} inline

[ Conceptually, do is
    !body !check
    body flatten check body while
  That is, do reverses the order from while, to signify that the body is
  evaluated once regardless of the condition.
]
'do {
  swap dup flatten
  while
} inline

'! { bind } prefix
'@ { commit } prefix
'~ { delete } prefix
'$ { '* swap ++ bind } prefix
'& { require-type } prefix
'^ { "^ is reserved for injection" compile-error } prefix

'rebind {
  dup delete bind
} inline

'recommit {
  dup delete commit
} inline

': { rebind } prefix
'; { recommit } prefix

'#inc { dup eval 1 #idx + swap rebind } inline
'#dec { dup eval 1 #idx - swap rebind } inline

'dup { !x x x } macro
'drop { !x } macro
'raw-drop { !x 'x raw-delete } macro

[ Inline macro for default arguments. Conceptually, default is
    !name !val
    { name defined? not }
    { val name bind }
    if
]
'default {
  dup
  { defined? not }
  { bind }
  { drop drop }
  if
} inline

[ inject macro is the preferred way of doing things like this, but inject is
  itself dependent on having units, so this has to be done long-hand
]
'unit {
  !base !type
  type add-type
  type {}
    base block-push-as-symbol
    type block-push
    'unsafe-set-type block-push-as-symbol
  macro
  type '->base-type ___quote___quote_++ {}
    base block-push
  macro
  '_ type '_base-type-of ___quote___quote_++ ___quote___quote_++ { drop }
    base block-push
  macro
  '_ base '_commit ___quote___quote_++ ___quote___quote_++ !base-commit
  { base-commit defined? }
  { type '->repr ___quote___quote_++ {}
      base '->repr ++ eval block-push
    macro
    '_ type '_repr-of ___quote___quote_++ ___quote___quote_++ { drop }
      base '->repr ++ eval block-push
    macro
    type '->size ++ {}
      base '->size ++ eval block-push
    macro
    '_ type '_size-of ++ ++ { drop }
      base '->size ++ eval block-push
    macro
    '_ type '_commit ___quote___quote_++ ___quote___quote_++ {}
      base-commit block-push-as-symbol
    macro
    '_ type '_declare ___quote___quote_++ ___quote___quote_++ {}
      '_ base '_declare ___quote___quote_++ ___quote___quote_++
        block-push-as-symbol
    macro
    type '->quote ___quote___quote_++ {
      '__quote unsafe-set-type
    } macro
    '_ type '_to-quote ___quote___quote_++ ___quote___quote_++ {
      '__quote unsafe-set-type
    } macro
    'quote-> type ___quote___quote_++ {}
      type block-push
      'unsafe-set-type block-push-as-symbol
    macro
  } if
} macro

'default-#integral { '#float8 } macro
'default-#rational { '#float8 } macro

'#idx default-#integral unit '#latin1-char default-#integral unit
'#B default-#integral unit
'#level default-#integral unit
'#aliases default-#integral unit

'_#idx_#idx_> {
  '#float8 1 #idx unsafe-set-type-at
  '#float8 0 #idx unsafe-set-type-at
  _#float8_#float8_>
  '#bc 0 #idx unsafe-set-type-at
} macro

'_#idx_#idx_>= {
  '#float8 1 #idx unsafe-set-type-at
  '#float8 0 #idx unsafe-set-type-at
  _#float8_#float8_>=
  '#bc 0 #idx unsafe-set-type-at
} macro

'_#idx_#idx_- {
  '#float8 1 #idx unsafe-set-type-at
  '#float8 0 #idx unsafe-set-type-at
  _#float8_#float8_-
  '#idx 0 #idx unsafe-set-type-at
} macro

'poly {
  !i !f
  f { '_ }
    { i 0 #idx _#idx_#idx_> }
    { i block-push
      'type-at block-push-as-symbol
      '___quote___quote_++ block-push-as-symbol
      '_ block-push
      '___quote___quote_++ block-push-as-symbol
      i 1 #idx _#idx_#idx_- :i
    } while
    f block-push
    '___quote___quote_++ block-push-as-symbol
    'eval block-push-as-symbol
  macro
} macro

'+ 2 #idx poly '- 2 #idx poly '* 2 #idx poly '/ 2 #idx poly '% 2 #idx poly
'= 2 #idx poly '/= 2 #idx poly
'< 2 #idx poly '<= 2 #idx poly '> 2 #idx poly '>= 2 #idx poly
'and 2 #idx poly 'or 2 #idx poly 'not 1 #idx poly
'++ 2 #idx poly
'repr-of 1 #idx poly 'base-type-of 1 #idx poly 'to-quote 1 #idx poly
'at 2 #idx poly 'len 1 #idx poly 'capacity 1 #idx poly
'slice 3 #idx poly

'derive {
  !f 1 #idx - !i !res
  "" !name {} !body
  { i 0 #idx >= }
  { i lift !cur
    name '_ cur ++ ++ :name
    body
      cur '->base-type ++ block-push-as-symbol
      i block-push
      'unsafe-set-type-at block-push-as-symbol
    :body
    i 1 #idx - :i
  } while
  name '_ f ++ ++
  body
    f block-push-as-symbol
    res block-push
    0 #idx block-push
    'unsafe-set-type-at block-push-as-symbol
  macro
} macro

'derive+ { 2 #idx '+ derive } macro
'derive- { 2 #idx '- derive } macro
'derive* { 2 #idx '* derive } macro
'derive/ { 2 #idx '/ derive } macro
'derive% { 2 #idx '% derive } macro
'derive= { 2 #idx '= derive } macro
'derive/= { 2 #idx '/= derive } macro
'derive< { 2 #idx '< derive } macro
'derive<= { 2 #idx '<= derive } macro
'derive> { 2 #idx '> derive } macro
'derive>= { 2 #idx '>= derive } macro
'derive-and { 2 #idx 'and derive } macro
'derive-or { 2 #idx 'or derive } macro
'derive-not { 1 #idx 'not derive } macro
'derive++ { 2 #idx '++ derive } macro
'derive-to-quote { '__quote 1 #idx 'to-quote derive } macro

[ A simply-numeric type is one that has identity multiplication and division.
  This could also be thought of as "algebraic" numeric types: it's for the case
  that traversing an array 10 times with a stride of 10 puts you at element 100.
]
'derive-simply-numeric {
  !bc !ty
  ty ty ty derive+ ty ty ty derive-
  ty ty ty derive* ty ty ty derive/ ty ty ty derive%
  ty ty bc derive= ty ty bc derive/=
  ty ty bc derive< ty ty bc derive<=
  ty ty bc derive> ty ty bc derive>=
} macro

[ Other ordinary numeric types produce different units from multiplication and
  division. Accordingly, this doesn't automatically derive * and /, but those
  should be derived separately for valid combinations of units.
]
'derive-numeric {
  !bc !ty
  ty ty ty derive+ ty ty ty derive-
  ty ty bc derive= ty ty bc derive/=
  ty ty bc derive< ty ty bc derive<=
  ty ty bc derive> ty ty bc derive>=
} macro

[ Derive the standard rational, two-member relationships between two types. This
  should only be used if the product or quotient should use a*b and a/b units.
  For more total conversion cases, like Pa = N/m^2, derivation should be done
  manually. Product units will always be put in order of presentation, so derive
  statements should always put units in lexical order.
]
'derive-binary-ratios {
  !kind !bc !b !a
  a '* b ++ ++ !a*b
  a '/ b ++ ++ !a/b
  b '/ a ++ ++ !b/a
  a*b kind unit a/b kind unit b/a kind unit
  a*b bc derive-numeric
  a/b bc derive-numeric
  b/a bc derive-numeric
  a b a*b derive* b a a*b derive*
  a b a/b derive/ b a b/a derive/
  a b/a b derive* b/a a b derive*
  b a/b a derive* a/b b a derive*
  a a/b b derive/ b b/a a derive/
  a*b b a derive/ a*b a b derive/
} macro

[ Converts an E-type into an A-type with corresponding names. ]
'derive-realization {
  !ty
  '# ty '-> ty ++ ++ ++ { to-quote }
    ty block-push-as-symbol
  macro
} macro

[ This converts combinations of E-type pairs to A-type pairs. ]
'derive-binary-realizations {
  !b !a
  '# a '*# b '-> a '* b ++ ++ ++ ++ ++ ++ ++ { to-quote }
    a '* b ++ ++ block-push-as-symbol
  macro
  '# a '/# b '-> a '/ b ++ ++ ++ ++ ++ ++ ++ { to-quote }
    a '/ b ++ ++ block-push-as-symbol
  macro
  '# b '/# a '-> b '/ a ++ ++ ++ ++ ++ ++ ++ { to-quote }
    b '/ a ++ ++ block-push-as-symbol
  macro
} macro

[ Simple logical types pass types through logical operators.
]
'derive-logical {
  !ty
  ty ty ty derive-and ty ty ty derive-or ty ty derive-not
  ty ty ty derive= ty ty ty derive/=
} macro

[ We have to derive #idx specially because it has custom-written derivations,
  which were necessary to support writing the derive macro itself.
]
'#idx '#idx '#idx derive+
'#idx '#idx '#bc derive= '#idx '#idx '#bc derive/=
'#idx '#idx '#bc derive< '#idx '#idx '#bc derive<=
'#idx derive-to-quote
'#idx '#idx '#idx derive*
'#idx '#idx '#idx derive%

'#latin1-char '#bc derive-simply-numeric
'#latin1-char derive-to-quote
'#B '#bc derive-numeric
'#B derive-to-quote
'#level '#bc derive-numeric
'#level derive-to-quote
'#aliases '#bc derive-numeric

'#B '#idx '#bc '#float8 derive-binary-ratios
'#B*#idx derive-to-quote '#B/#idx derive-to-quote '#idx/#B derive-to-quote

'type-of { 0 #idx type-at swap drop } macro

'#true { 1 #bc } macro
'#false { 0 #bc } macro

'head { 0 #idx at } macro
'tail { 1 #idx -1 #idx slice } macro

'if2 { fi 2 #idx lift 2 #idx lift if } inline
'if3 { fi 3 #idx lift 3 #idx lift 3 #idx lift if } inline

'inject { binding-prefix _inject } inline

'_inject {
  !bp &__block !data
  {} !res
  { 0 #idx !i } { i data len < } { 'i #inc }
  { fi
    { data i type-in-block '__symbol = }
    { data i at-as-quote !cur
      { cur head '^ quote->char = }
      { bp cur tail ++ !rest
        { rest fqn-defined? not }
        { "UNKNOWN_SYMBOL_IN_INJECTION " rest ++ compile-error }
        if2
        res rest get-by-fqn block-push :res
      }
      { res cur block-push-as-symbol :res }
      if3
    }
    { data i type-in-block '__block = }
    { res data i at bp _inject block-push :res }
    { res data i at block-push :res }
    if
  } for
  res
} macro
